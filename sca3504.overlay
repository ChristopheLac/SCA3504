/*
 * Copyright (c) 2020 Phytec Messtechnik GmbH
 *
 * SPDX-License-Identifier: Apache-2.0
 */

 / {
	model = "Nordic nRF52840 DK NRF52840";
	compatible = "nordic,nrf52840-dk-nrf52840";
	
	leds {
		compatible = "gpio-leds";
		led0: led_0 {
			gpios = <&gpio1 0 GPIO_ACTIVE_LOW>;
			label = "Led Debug";
		};
		led1: led_1 {
			gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
			label = "Pin USB";
		};
		led2: led_2 {
			gpios = <&gpio0 22 GPIO_ACTIVE_LOW>;
			label = "TP13";
		};
		led3: led_3 {
			gpios = <&gpio0 10 GPIO_ACTIVE_LOW>;
			label = "TP2";
		};
	};

	buttons {
		compatible = "gpio-keys";
		button0: button_0 {
			gpios = <&gpio0 11 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button switch 0";
		};
		button1: button_1 {
			gpios = <&gpio0 16 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button switch 1";
		};
		button2: button_2 {
			gpios = <&gpio0 24 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button switch 2";
		};
		button3: button_3 {
			gpios = <&gpio0 25 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button switch 3";
		};
	};
	
	pwmleds {
		compatible = "pwm-leds";
		pwm_led0: pwm_led_0 {
			pwms = <&pwm0 0 PWM_KHZ(50) PWM_POLARITY_NORMAL>;
		};
	};

	/* These aliases are provided for compatibility with samples */
	aliases {
		led0 = &led0;
		led1 = &led1;
		led2 = &led2;
		led3 = &led3;
		pwm-led0 = &pwm_led0;
		sw0 = &button0;
		sw1 = &button1;
		sw2 = &button2;
		sw3 = &button3;
	};
};

&arduino_serial {
	compatible = "nordic,nrf-uarte";
	pinctrl-0 = <&uart1_default>;
	pinctrl-1 = <&uart1_sleep>;
	status = "okay";

	modbus0 {
		compatible = "zephyr,modbus-serial";
		status = "okay";
		de-gpios = <&arduino_header 5 GPIO_ACTIVE_HIGH>;	/* A5 */
	};
};

&zephyr_udc0 {
	cdc_acm_uart0 {
		compatible = "zephyr,cdc-acm-uart";
	};

	cdc_acm_uart1 {
		compatible = "zephyr,cdc-acm-uart";
	};
};


&pwm0 {
	compatible = "nordic,nrf-pwm";
	status = "okay";
	#pwm-cells = < 3 >;
	pinctrl-0 = <&pwm0_default>;
};

&pwm0_default {
	group1 {
		psels = <NRF_PSEL(PWM_OUT0, 0, 24)>;
		nordic,invert;
	};
	group2 {
		psels = <NRF_PSEL(PWM_OUT0, 0, 24)>;
		nordic,invert;
	};
};

&uart1_default {
	group1 {
		psels = <NRF_PSEL(UART_RX, 1, 9)>;
	};
	group2 {
		psels = <NRF_PSEL(UART_TX, 0, 12)>;
	};
};

&uart1_sleep {
	group1 {
		psels = <NRF_PSEL(UART_RX, 1, 1)>,
		<NRF_PSEL(UART_RX, 1, 2)>;
	};
};

